1) Quina diferència hi ha entre un Subject i un Behaviour Subject?
Un Subject només envia valors als subscriptors en el moment en què es produeixen, sense guardar cap historial, 
mentre que un BehaviorSubject manté l'últim valor emès i el proporciona immediatament a qualsevol nou subscriptor.

2) Analitzeu com el component Portada de l'aplicació webShopUI acaba mostrant els llibres d'una categoria.
Els mostra mitjançant un sistema de subscripcions a esdeveniments gestionat per CatalogueWrapperService.
Quan es filtra per categoria, es rep un objecte "Categoria" des de l'esdeveniment filterByCategoriaToCatalogue, 
s'actualitzen les variables de mode i filtre, i es crida al servei LibroService per obtenir els llibres d'aquella categoria. 
Aquests llibres es guarden a la variable "libros" i es mostren a la interfície.

3) Expliqueu que fa el component Catalogo i com es comunica amb Portada
El component Catalogo ens mostra la llista de llibres rebuda de PortadaComponent mitjançant @Input(), 
llavors l'usuari veu els detalls d’un llibre i pot afegir-lo a la cistella. Quan es fa clic en un llibre, 
emet l'esdeveniment selectLibro, que PortadaComponent captura per mostrar-ne els detalls. I quan s'afegeix 
un llibre a la cistella, s'emet onInsertarLibro, i PortadaComponent gestiona l'acció amb onInsertarCesta. 

La comunicació entre PortadaComponent i CatalogoComponent es fa a través de l’HTML, on PortadaComponent inclou
el selector de CatalogoComponent i li passa les dades com a propietats.

4) Analitzeu tot el procediment de gestió de la Cistella de la compra
El component CestaComponent rep la cistella actual com a @Input() i permet diverses accions sobre els elements.
Quan l’usuari vol veure els detalls d’un llibre, es dispara l'esdeveniment onLibroSelec, i altres components el 
poden capturar per mostrar la informació.

Quan s’afegeix un llibre a la cistella s’incrementa la seva quantitat i es fa una crida a CestaService 
per actualitzar la cistella al servidor amb els totals. Si es vol eliminar un llibre es mostra una confirmació i, 
si l’usuari accepta, es buida tota la cistella ficant el nombre d'unitats a 0 i es torna a actualitzar.

Quan l’usuari vol procedir a la compra s’emet l’esdeveniment onComprar, que el component PortadaComponent 
pot capturar per canviar a la vista de compra.

El component cistella es comunica amb PortadaComponent mitjançant @Output() i amb el servei CestaService per fer les gestions.


5) Busqueu informació sobre ngrx/store i penseu com ho podríem utilitzar per comunicar components...
És una llibreria per a Angular basada en el patró Redux, que permet gestionar l'estat global de l'aplicació de manera centralitzada. 
En lloc de comunicar components mitjançant @Input(), @Output() o serveis amb Subject, utilitza un store global 
on es desa l'estat i es modifica mitjançant actions que son ordres que descriuen un canvi a l'estat de l'aplicació i reducers 
que són funcions pures que escolten les actions i actualitzen l'estat. 

Es podria substituir la comunicació basada en CatalogueWrapperService i CestaWrapperService, fent que el catàleg i la cistella 
es gestionin des del store global, i fent que qualsevol component pugui accedir-hi sense necessitat de passar dades manualment.







